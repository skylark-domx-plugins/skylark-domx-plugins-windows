{"version":3,"sources":["skylark-domx-plugins-windows.js"],"names":["define","plugins","windows","noder","eventer","$","Movable","Resizable","Window","Plugin","inherit","klassName","pluginName","options","selectors","headerPane","contentPane","footerPane","titlebar","buttons","fullscreen","maximize","minimize","close","classes","fixedContent","initMaximized","movable","dragHandle","dragCancel","resizable","minWidth","minHeight","border","all","top","left","right","bottom","topLeft","topRight","bottomLeft","bottomRight","_construct","elm","prototype","call","this","isOpened","isMaximized","$window","_elm","_velm","elmx","_movable","handle","starting","e","elemCancel","target","closest","length","isResizing","_resizable","directions","constraints","started","moving","stopped","$close","$maximize","$minimize","$fullscreen","off","on","_keydown","push","trigger","remove","idx","indexOf","splice","get","focus","$W","window","$D","document","removeClass","initModalLeft","width","modalWidth","scrollLeft","initModalTop","height","modalHeight","scrollTop","css","modalData","offset","addClass","resized","keyboard","keyCode","which","charCode","ctrlKey","metaKey","altKey","i","main"],"mappings":"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","file":"../skylark-domx-plugins-windows.js","sourcesContent":["define('skylark-domx-plugins-windows/windows',[\n    \"skylark-domx-plugins-base/plugins\"\n],function (plugins) {\n    'use strict';\n\n    return plugins.windows = {};\n\n});\ndefine('skylark-domx-plugins-windows/window',[\r\n    \"skylark-domx/noder\",\r\n    \"skylark-domx/eventer\",\r\n    \"skylark-domx/query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-domx-plugins-interact/movable\",\r\n    \"skylark-domx-plugins-interact/resizable\",\r\n    \"./windows\"\r\n], function (noder,eventer,$,plugins,Movable, Resizable,windows) {\r\n    'use strict';\r\n\r\n    /*ref: skylark-photoviewer */\r\n    var windows = [];\r\n\r\n    var Window = plugins.Plugin.inherit({\r\n        klassName : \"Window\",\r\n\r\n        pluginName : \"lark.domx.window\",\r\n\r\n        options : {\r\n            selectors : {\r\n                headerPane  : \"\",\r\n                contentPane : \"\",\r\n                footerPane  : \"\",\r\n                titlebar : \"\",\r\n                buttons : {\r\n                    \"fullscreen\" : \".button-fullscreen\",\r\n                    \"maximize\" : \".button-maximize\",\r\n                    \"minimize\" : \".button-minimize\",     \r\n                    \"close\" : \".button-close\"\r\n                }\r\n            },\r\n\r\n            classes : {\r\n                \"maximize\" : \"maximize\"\r\n            },\r\n\r\n            fixedContent: true,\r\n            initMaximized: false,\r\n\r\n            movable : {\r\n                dragHandle: false,\r\n                dragCancel: null\r\n            },\r\n            resizable : {\r\n                minWidth: 320,\r\n                minHeight: 320,\r\n                border : {\r\n                    classes :  {\r\n                        all : \"resizable-handle\",\r\n                        top : \"resizable-handle-n\",\r\n                        left: \"resizable-handle-w\",\r\n                        right: \"resizable-handle-e\",\r\n                        bottom: \"resizable-handle-s\", \r\n                        topLeft : \"resizable-handle-nw\", \r\n                        topRight : \"resizable-handle-ne\",\r\n                        bottomLeft : \"resizable-handle-sw\",             \r\n                        bottomRight : \"resizable-handle-se\"     \r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _construct : function(elm,options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n            this.isOpened = false;\r\n            this.isMaximized = false;\r\n\r\n            this.$window = $(this._elm);\r\n\r\n            this._velm = this.elmx();\r\n\r\n            if (this.options.movable) {\r\n                this._movable = new Movable(elm,{\r\n                    handle : this.options.movable.dragHandle,\r\n                    starting : (e) => {\r\n                        const   dragCancel = this.options.movable.dragCancel, \r\n                                elemCancel = $(e.target).closest(dragCancel);\r\n                        if (elemCancel.length) {\r\n                            return false;\r\n                        }\r\n                        if (this.isResizing || this.isMaximized) {\r\n                            return false;\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            if (this.options.resizable) {\r\n\r\n                this._resizable = new Resizable(elm,{\r\n                    handle : {\r\n                        border : {\r\n                            directions : {\r\n                                top: true, //n\r\n                                left: true, //w\r\n                                right: true, //e\r\n                                bottom: true, //s\r\n                                topLeft : true, // nw\r\n                                topRight : true, // ne\r\n                                bottomLeft : true, // sw\r\n                                bottomRight : true // se                         \r\n                            },\r\n                            classes : {\r\n                                all : this.options.resizable.border.classes.all,\r\n                                top : this.options.resizable.border.classes.top,\r\n                                left: this.options.resizable.border.classes.left,\r\n                                right: this.options.resizable.border.classes.right,\r\n                                bottom: this.options.resizable.border.classes.bottom, \r\n                                topLeft : this.options.resizable.border.classes.topLeft, \r\n                                topRight : this.options.resizable.border.classes.topRight,\r\n                                bottomLeft : this.options.resizable.border.classes.bottomLeft,             \r\n                                bottomRight : this.options.resizable.border.classes.bottomRight                        \r\n                            }                        \r\n                        }\r\n                    },\r\n                    constraints : {\r\n                        minWidth : this.options.resizable.minWidth,\r\n                        minHeight : this.options.resizable.minHeight\r\n                    },\r\n                    started : function(){\r\n                        this.isResizing = true;\r\n                    },\r\n                    moving : function(e) {\r\n                        /*\r\n                        const imageWidth = $(image).width();\r\n                        const imageHeight = $(image).height();\r\n                        const stageWidth = $(stage).width();\r\n                        const stageHeight = $(stage).height();\r\n                        const left = (stageWidth - imageWidth) /2;\r\n                        const top = (stageHeight- imageHeight) /2;\r\n                        $(image).css({\r\n                            left,\r\n                            top\r\n                        });\r\n                        */\r\n                    },\r\n                    stopped :function () {\r\n                        this.isResizing = false;\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            this.$close = this._velm.$(this.options.selectors.buttons.close);\r\n            this.$maximize = this._velm.$(this.options.selectors.buttons.maximize);\r\n            this.$minimize = this._velm.$(this.options.selectors.buttons.minimize);\r\n            this.$fullscreen = this._velm.$(this.options.selectors.buttons.fullscreen);\r\n\r\n\r\n            this.$close.off(\"click.window\").on(\"click.window\", e => {\r\n                this.close();\r\n            });\r\n            this.$fullscreen.off(\"click.window\").on(\"click.window\", () => {\r\n                this.fullscreen();\r\n            });\r\n            this.$maximize.off(\"click.window\").on(\"click.window\", () => {\r\n                this.maximize();\r\n            });\r\n            this.$window.off(\"keydown.window\").on(\"keydown.window\", e => {\r\n                this._keydown(e);\r\n            });\r\n\r\n            windows.push(this);\r\n        },\r\n        close: function() {\r\n            this.trigger('closing', this);\r\n            this.$window.remove();\r\n            this.isOpened = false;\r\n            this.isMaximized = false;\r\n\r\n            ///if (!$(Constants.CLASS_NS + '-modal').length) {\r\n            ///    if (this.options.fixedContent) {\r\n            ///        $('html').css({\r\n            ///            overflow: '',\r\n            ///            'padding-right': ''\r\n            ///        });\r\n            ///    }\r\n                ///if (this.options.multiInstances) {\r\n                ///    zIndex = this.options.zIndex;\r\n                ///}\r\n            ///    eventer.off(window,\"resize.window\");\r\n            var idx = windows.indexOf(this);\r\n            if (idx>-1) {\r\n                windows.splice(idx,1);\r\n            }\r\n            this.trigger('closed', this);\r\n        },\r\n\r\n        maximize: function() {\r\n            this.$window.get(0).focus();\r\n            if (!this.isMaximized) {\r\n                this.modalData = {\r\n                    width: this.$window.width(),\r\n                    height: this.$window.height(),\r\n                    left: this.$window.offset().left,\r\n                    top: this.$window.offset().top\r\n                };\r\n                this.$window.addClass(this.options.classes.maximize);\r\n                this.$window.css({\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    left: 0,\r\n                    top: 0\r\n                });\r\n                this.isMaximized = true;\r\n            } else {\r\n                let $W = $(window),$D = $(document);\r\n                this.$window.removeClass(this.options.classes.maximize);\r\n                const initModalLeft = ($W.width() - this.options.modalWidth) / 2 + $D.scrollLeft();\r\n                const initModalTop = ($W.height() - this.options.modalHeight) / 2 + $D.scrollTop();\r\n                this.$window.css({\r\n                    width: this.modalData.width ? this.modalData.width : this.options.modalWidth,\r\n                    height: this.modalData.height ? this.modalData.height : this.options.modalHeight,\r\n                    left: this.modalData.left ? this.modalData.left : initModalLeft,\r\n                    top: this.modalData.top ? this.modalData.top : initModalTop\r\n                });\r\n                this.isMaximized = false;\r\n            }\r\n\r\n            eventer.resized(this._elm);\r\n        },\r\n        fullscreen: function() {\r\n            this.$window.get(0).focus();\r\n            noder.fullscreen(this.$window[0]);\r\n        },\r\n        _keydown: function(e) {\r\n            if (!this.options.keyboard) {\r\n                return false;\r\n            }\r\n            const keyCode = e.keyCode || e.which || e.charCode;\r\n            const ctrlKey = e.ctrlKey || e.metaKey;\r\n            const altKey = e.altKey || e.metaKey;\r\n            switch (keyCode) {\r\n\r\n                // Q\r\n                case 81:\r\n                    this.close();\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    eventer.on(window,\"resize.window\", ()=>{\r\n        for (let i=0; i<windows.length; i++ ) {\r\n            eventer.resized(windows[i]._elm);\r\n        }\r\n    });\r\n\r\n    return windows.Window = Window;\r\n});\ndefine('skylark-domx-plugins-windows/main',[\n\t'./windows',\n\t\"./window\"\n], function (windows) {\n    'use strict';\n    return windows;\n});\ndefine('skylark-domx-plugins-windows', ['skylark-domx-plugins-windows/main'], function (main) { return main; });\n\n"]}