{"version":3,"sources":["window.js"],"names":["define","noder","eventer","$","plugins","Movable","Resizable","windows","Window","Plugin","inherit","klassName","pluginName","options","selectors","headerPane","contentPane","footerPane","titlebar","buttons","fullscreen","maximize","minimize","close","classes","fixedContent","initMaximized","movable","dragHandle","dragCancel","resizable","minWidth","minHeight","border","all","top","left","right","bottom","topLeft","topRight","bottomLeft","bottomRight","_construct","elm","prototype","call","this","isOpened","isMaximized","$window","_elm","_velm","elmx","_movable","handle","starting","e","target","closest","length","isResizing","_resizable","directions","constraints","started","moving","stopped","$close","$maximize","$minimize","$fullscreen","off","on","_keydown","push","trigger","remove","idx","indexOf","splice","get","focus","$W","window","$D","document","removeClass","initModalLeft","width","modalWidth","scrollLeft","initModalTop","height","modalHeight","scrollTop","css","modalData","offset","addClass","resized","keyboard","keyCode","which","charCode","ctrlKey","metaKey","altKey","i"],"mappings":"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","file":"../window.js","sourcesContent":["define([\r\n    \"skylark-domx/noder\",\r\n    \"skylark-domx/eventer\",\r\n    \"skylark-domx/query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-domx-plugins-interact/movable\",\r\n    \"skylark-domx-plugins-interact/resizable\",\r\n    \"./windows\"\r\n], function (noder,eventer,$,plugins,Movable, Resizable,windows) {\r\n    'use strict';\r\n\r\n    /*ref: skylark-photoviewer */\r\n    var windows = [];\r\n\r\n    var Window = plugins.Plugin.inherit({\r\n        klassName : \"Window\",\r\n\r\n        pluginName : \"lark.domx.window\",\r\n\r\n        options : {\r\n            selectors : {\r\n                headerPane  : \"\",\r\n                contentPane : \"\",\r\n                footerPane  : \"\",\r\n                titlebar : \"\",\r\n                buttons : {\r\n                    \"fullscreen\" : \".button-fullscreen\",\r\n                    \"maximize\" : \".button-maximize\",\r\n                    \"minimize\" : \".button-minimize\",     \r\n                    \"close\" : \".button-close\"\r\n                }\r\n            },\r\n\r\n            classes : {\r\n                \"maximize\" : \"maximize\"\r\n            },\r\n\r\n            fixedContent: true,\r\n            initMaximized: false,\r\n\r\n            movable : {\r\n                dragHandle: false,\r\n                dragCancel: null\r\n            },\r\n            resizable : {\r\n                minWidth: 320,\r\n                minHeight: 320,\r\n                border : {\r\n                    classes :  {\r\n                        all : \"resizable-handle\",\r\n                        top : \"resizable-handle-n\",\r\n                        left: \"resizable-handle-w\",\r\n                        right: \"resizable-handle-e\",\r\n                        bottom: \"resizable-handle-s\", \r\n                        topLeft : \"resizable-handle-nw\", \r\n                        topRight : \"resizable-handle-ne\",\r\n                        bottomLeft : \"resizable-handle-sw\",             \r\n                        bottomRight : \"resizable-handle-se\"     \r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _construct : function(elm,options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n            this.isOpened = false;\r\n            this.isMaximized = false;\r\n\r\n            this.$window = $(this._elm);\r\n\r\n            this._velm = this.elmx();\r\n\r\n            if (this.options.movable) {\r\n                this._movable = new Movable(elm,{\r\n                    handle : this.options.movable.dragHandle,\r\n                    starting : (e) => {\r\n                        const   dragCancel = this.options.movable.dragCancel, \r\n                                elemCancel = $(e.target).closest(dragCancel);\r\n                        if (elemCancel.length) {\r\n                            return false;\r\n                        }\r\n                        if (this.isResizing || this.isMaximized) {\r\n                            return false;\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            if (this.options.resizable) {\r\n\r\n                this._resizable = new Resizable(elm,{\r\n                    handle : {\r\n                        border : {\r\n                            directions : {\r\n                                top: true, //n\r\n                                left: true, //w\r\n                                right: true, //e\r\n                                bottom: true, //s\r\n                                topLeft : true, // nw\r\n                                topRight : true, // ne\r\n                                bottomLeft : true, // sw\r\n                                bottomRight : true // se                         \r\n                            },\r\n                            classes : {\r\n                                all : this.options.resizable.border.classes.all,\r\n                                top : this.options.resizable.border.classes.top,\r\n                                left: this.options.resizable.border.classes.left,\r\n                                right: this.options.resizable.border.classes.right,\r\n                                bottom: this.options.resizable.border.classes.bottom, \r\n                                topLeft : this.options.resizable.border.classes.topLeft, \r\n                                topRight : this.options.resizable.border.classes.topRight,\r\n                                bottomLeft : this.options.resizable.border.classes.bottomLeft,             \r\n                                bottomRight : this.options.resizable.border.classes.bottomRight                        \r\n                            }                        \r\n                        }\r\n                    },\r\n                    constraints : {\r\n                        minWidth : this.options.resizable.minWidth,\r\n                        minHeight : this.options.resizable.minHeight\r\n                    },\r\n                    started : function(){\r\n                        this.isResizing = true;\r\n                    },\r\n                    moving : function(e) {\r\n                        /*\r\n                        const imageWidth = $(image).width();\r\n                        const imageHeight = $(image).height();\r\n                        const stageWidth = $(stage).width();\r\n                        const stageHeight = $(stage).height();\r\n                        const left = (stageWidth - imageWidth) /2;\r\n                        const top = (stageHeight- imageHeight) /2;\r\n                        $(image).css({\r\n                            left,\r\n                            top\r\n                        });\r\n                        */\r\n                    },\r\n                    stopped :function () {\r\n                        this.isResizing = false;\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            this.$close = this._velm.$(this.options.selectors.buttons.close);\r\n            this.$maximize = this._velm.$(this.options.selectors.buttons.maximize);\r\n            this.$minimize = this._velm.$(this.options.selectors.buttons.minimize);\r\n            this.$fullscreen = this._velm.$(this.options.selectors.buttons.fullscreen);\r\n\r\n\r\n            this.$close.off(\"click.window\").on(\"click.window\", e => {\r\n                this.close();\r\n            });\r\n            this.$fullscreen.off(\"click.window\").on(\"click.window\", () => {\r\n                this.fullscreen();\r\n            });\r\n            this.$maximize.off(\"click.window\").on(\"click.window\", () => {\r\n                this.maximize();\r\n            });\r\n            this.$window.off(\"keydown.window\").on(\"keydown.window\", e => {\r\n                this._keydown(e);\r\n            });\r\n\r\n            windows.push(this);\r\n        },\r\n        close: function() {\r\n            this.trigger('closing', this);\r\n            this.$window.remove();\r\n            this.isOpened = false;\r\n            this.isMaximized = false;\r\n\r\n            ///if (!$(Constants.CLASS_NS + '-modal').length) {\r\n            ///    if (this.options.fixedContent) {\r\n            ///        $('html').css({\r\n            ///            overflow: '',\r\n            ///            'padding-right': ''\r\n            ///        });\r\n            ///    }\r\n                ///if (this.options.multiInstances) {\r\n                ///    zIndex = this.options.zIndex;\r\n                ///}\r\n            ///    eventer.off(window,\"resize.window\");\r\n            var idx = windows.indexOf(this);\r\n            if (idx>-1) {\r\n                windows.splice(idx,1);\r\n            }\r\n            this.trigger('closed', this);\r\n        },\r\n\r\n        maximize: function() {\r\n            this.$window.get(0).focus();\r\n            if (!this.isMaximized) {\r\n                this.modalData = {\r\n                    width: this.$window.width(),\r\n                    height: this.$window.height(),\r\n                    left: this.$window.offset().left,\r\n                    top: this.$window.offset().top\r\n                };\r\n                this.$window.addClass(this.options.classes.maximize);\r\n                this.$window.css({\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    left: 0,\r\n                    top: 0\r\n                });\r\n                this.isMaximized = true;\r\n            } else {\r\n                let $W = $(window),$D = $(document);\r\n                this.$window.removeClass(this.options.classes.maximize);\r\n                const initModalLeft = ($W.width() - this.options.modalWidth) / 2 + $D.scrollLeft();\r\n                const initModalTop = ($W.height() - this.options.modalHeight) / 2 + $D.scrollTop();\r\n                this.$window.css({\r\n                    width: this.modalData.width ? this.modalData.width : this.options.modalWidth,\r\n                    height: this.modalData.height ? this.modalData.height : this.options.modalHeight,\r\n                    left: this.modalData.left ? this.modalData.left : initModalLeft,\r\n                    top: this.modalData.top ? this.modalData.top : initModalTop\r\n                });\r\n                this.isMaximized = false;\r\n            }\r\n\r\n            eventer.resized(this._elm);\r\n        },\r\n        fullscreen: function() {\r\n            this.$window.get(0).focus();\r\n            noder.fullscreen(this.$window[0]);\r\n        },\r\n        _keydown: function(e) {\r\n            if (!this.options.keyboard) {\r\n                return false;\r\n            }\r\n            const keyCode = e.keyCode || e.which || e.charCode;\r\n            const ctrlKey = e.ctrlKey || e.metaKey;\r\n            const altKey = e.altKey || e.metaKey;\r\n            switch (keyCode) {\r\n\r\n                // Q\r\n                case 81:\r\n                    this.close();\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    eventer.on(window,\"resize.window\", ()=>{\r\n        for (let i=0; i<windows.length; i++ ) {\r\n            eventer.resized(windows[i]._elm);\r\n        }\r\n    });\r\n\r\n    return windows.Window = Window;\r\n});"]}